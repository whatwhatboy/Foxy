#include "Pointers.hpp"
#include "Memory/Signature.hpp"
#include "Memory/PointerManager.hpp"
#include "R.A.G.Engine/BitBuffer.hpp"

namespace base::pointers {
	inline memory::pointerManager ptrMgr{};
	void scanPointers() {
		stopwatch stopwatch{};
		ptrMgr.add(xorstr_("SVM"), xorstr_("4A 89 3C 39"), xorstr_("-0x27, call"));
		ptrMgr.add(xorstr_("PTH"), xorstr_("48 8D 1C F8 48 8B CB"), xorstr_("+7, call"));
		ptrMgr.add(xorstr_("HTP"), xorstr_("83 F9 FF 74 31 4C 8B 0D"));
		ptrMgr.add(xorstr_("GSBGH"), xorstr_("E8 ? ? ? ? 84 C0 0F 84 ? ? ? ? 8B 05 ? ? ? ? 48 8D 4C 24"), xorstr_("call"));
		ptrMgr.add(xorstr_("GSIFGI"), xorstr_("E8 ? ? ? ? 84 C0 74 16 48 8B 4B 60"), xorstr_("call"));
		ptrMgr.add(xorstr_("GGISI"), xorstr_("48 89 5C 24 08 48 89 6C 24 10 48 89 74 24 20 57 48 81"));
		ptrMgr.add(xorstr_("JBSI"), xorstr_("E8 ? ? ? ? 0F B6 CB 84 C0 41 0F 44 CD"), xorstr_("call"));
		ptrMgr.add(xorstr_("SMFS"), xorstr_("E8 ? ? ? ? 84 C0 0F 84 F6 FE FF FF"), xorstr_("call"));
		ptrMgr.add(xorstr_("RBA"), xorstr_("48 89 5C 24 ? 57 48 83 EC 30 41 8B F8 4C"));
		ptrMgr.add(xorstr_("WBA"), xorstr_("E8 ? ? ? ? 01 7E 08"), xorstr_("call"));
		ptrMgr.add(xorstr_("RBS"), xorstr_("48 8D 54 24 ? 41 C1 E1 03"), xorstr_("+0xF, call"));
		ptrMgr.add(xorstr_("WBS"), xorstr_("E8 ? ? ? ? 01 6B 10"), xorstr_("call"));
		ptrMgr.add(xorstr_("SEA"), xorstr_("48 8B DA 44 8B CD"), xorstr_("+0x13, call"));
		ptrMgr.add(xorstr_("RCS"), xorstr_("48 89 5C 24 08 48 89 6C 24 10 48 89 74 24 18 57 41 54 41 55 41 56 41 57 48 83 EC 40 4C 8B EA"));
		ptrMgr.add(xorstr_("SSA"), xorstr_("E8 ? ? ? ? B0 01 E9 ? ? ? ? 80 7A 20 20"), xorstr_("call"));
		ptrMgr.add(xorstr_("NCMCDE"), xorstr_("48 83 EC 20 4C 8B 71 50 33 ED"), xorstr_("-0x19"));
		ptrMgr.add(xorstr_("GNO"), xorstr_("48 89 5C 24 08 48 89 6C 24 10 48 89 74 24 18 57 41 54 41 55 41 56 41 57 48 83 EC 40 4C 8B EA"), xorstr_("+0x109, call"));
		ptrMgr.add(xorstr_("GST"), xorstr_("48 89 5C 24 08 48 89 6C 24 10 48 89 74 24 18 57 41 54 41 55 41 56 41 57 48 83 EC 40 4C 8B EA"), xorstr_("+0x2F, call"));
		//ptrMgr.add(xorstr_("CAGTSC"), xorstr_("57 48 83 EC 20 48 8B F2 48 8B D9 E8 ? ? ? ? 84 C0 74 77"));
		ptrMgr.add(xorstr_("WPGSDN"), xorstr_("48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 41 54 41 55 41 56 41 57 48 83 EC 30 0F B7 81"));
		ptrMgr.add(xorstr_("WPGDN"), xorstr_("48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC 20 48 81 C1 ? ? ? ? 48 8B DA E8"));
		ptrMgr.add(xorstr_("NTMC"), xorstr_("78 1F 41 8B 17"), xorstr_("+0x1C, call"));
		ptrMgr.add(xorstr_("RBIST"), xorstr_("E8 ? ? ? ? 48 8B BC 24 B0 00 00 00"), xorstr_("call"));
		ptrMgr.add(xorstr_("QPWP"), xorstr_("48 83 EC 48 48 8B 44 24 78 48 89 44 24 30"));
		ptrMgr.add(xorstr_("QPVMI"), xorstr_("E8 ? ? ? ? 84 C0 74 4D B3 01"), xorstr_("call"));
		ptrMgr.add(xorstr_("SPVCI"), xorstr_("48 8B C4 48 89 58 08 48 89 70 10 48 89 78 18 4C 89 48 20 55 41 54 41 55 41 56 41 57 48 8D A8 98"));
		ptrMgr.add(xorstr_("SIAPE"), xorstr_("48 83 EC 38 F6 82"));
		ptrMgr.add(xorstr_("CJR"), xorstr_("E8 ? ? ? ? 84 C0 0F 84 ? ? ? ? 49 8D 8F ? ? ? ?"), xorstr_("call"));
		ptrMgr.add(xorstr_("MCF"), xorstr_("E8 ? ? ? ? 83 F8 FF 75 B9"), xorstr_("call"));
		ptrMgr.add(xorstr_("GPA"), xorstr_("75 56 33 C9"), xorstr_("-0x20"));
		ptrMgr.add(xorstr_("GNED"), xorstr_("53 43 52 49 50 54 5F 4E 45 54 57 4F 52 4B"), xorstr_("-0x38"));
		ptrMgr.add(xorstr_("HRP"), xorstr_("E8 ? ? ? ? EB 0B 8B CB"), xorstr_("call"));
		ptrMgr.add(xorstr_("HJR"), xorstr_("48 8B C4 48 89 58 08 4C 89 48 20 4C 89 40 18 48 89 50 10 55 56 57 41 54 41 55 41 56 41 57 48 8D A8 C8 FE"));
		ptrMgr.add(xorstr_("WJRD"), xorstr_("E8 ? ? ? ? 41 8B DF 84 C0"), xorstr_("call"));
		ptrMgr.add(xorstr_("CPDM"), xorstr_("48 89 5C 24 08 48 89 74 24 10 48 89 7C 24 18 41 56 48 83 EC 20 BF 01 00 00 00"));
		ptrMgr.add(xorstr_("GGLFT"), xorstr_("E8 ? ? ? ? 48 8D 4B 0B"), xorstr_("call"));
		ptrMgr.add(xorstr_("GJGLFT"), xorstr_("48 83 EC 28 E8 ? ? ? ? 48 85 C0 75 34 8B 0D ? ? ? ? 65 48 8B 04 25 ? ? ? ? BA ? ? ? ? 48 8B 04 C8 8B 0C 02 D1"));
		ptrMgr.add(xorstr_("NPMS"), xorstr_("3B 7B 18 72 E3"), xorstr_("-7, call"));
		ptrMgr.add(xorstr_("NPMI"), xorstr_("41 56 48 83 EC ? 48 8B F1 B9 ? ? ? ? 49 8B F9 41 8B E8 4C 8B F2 E8"), xorstr_("-0x13"));
		ptrMgr.add(xorstr_("GCP"), xorstr_("E8 ? ? ? ? 38 58 1E 74 31"), xorstr_("call"));
		ptrMgr.add(xorstr_("ONT"), xorstr_("E8 ? ? ? ? F6 D8 1B C9 83 C1 08"), xorstr_("call"));
		ptrMgr.add(xorstr_("TSE"), xorstr_("45 8B F0 41 8B F9 48 8B EA"), xorstr_("-0x1C"));
		ptrMgr.add(xorstr_("SSI"), xorstr_("E8 ? ? ? ? 8B 00 48 8B 0D ? ? ? ? 48 63 D0 0F AF 05 ? ? ? ? 44 0F B6 04 0A 48 63 D0 41 FF C7 48 03 15"), xorstr_("call"));
		ptrMgr.add(xorstr_("ADTP"), xorstr_("89 54 24 10 48 83 EC 28 48 8B 41 40 4C 63 CA 46 0F B6 14 08 8B 41 4C 41 81 E2 ? ? ? ? 45 8B CA 0F AF C2"));
		ptrMgr.add(xorstr_("AGTTD"), xorstr_("48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 0F B7 41 28 45 33 D2 8B DA 4C 8B C9 49 8B F8 41 8B CA 8B D0 41 8D 72 01"));
		ptrMgr.add(xorstr_("SD"), xorstr_("48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC 20 48 63 FA 48 8B D9 E8 ? ? ? ? C7 43 ? ? ? ? ? 48 8D 05 ? ? ? ? 48 89 03"));
		ptrMgr.add(xorstr_("QD"), xorstr_("48 89 5C 24 ? 57 48 83 EC ? 0F B6 99"));
		ptrMgr.add(xorstr_("HIE"), xorstr_("48 89 5C 24 ? 57 48 83 EC ? 8B FA 8B D9 FF 15"));
		ptrMgr.add(xorstr_("ASLS"), xorstr_("E8 ? ? ? ? 80 BD ? ? ? ? ? 75 4F"), xorstr_("call"));
		ptrMgr.add(xorstr_("PSPM"), xorstr_("4C 8B 15 ? ? ? ? 44 39 6E 44"), xorstr_("-5, call"));
		ptrMgr.add(xorstr_("AETS"), xorstr_("4C 8B 15 ? ? ? ? 44 39 6E 44"), xorstr_("+0x3D, call"));
		ptrMgr.add(xorstr_("SSEL"), xorstr_("4C 8B 15 ? ? ? ? 44 39 6E 44"), xorstr_("+0x82, call"));
		ptrMgr.add(xorstr_("GSC"), xorstr_("40 B6 01 39 79 2C"), xorstr_("+0x17, call"));
		ptrMgr.add(xorstr_("STI"), xorstr_("83 89 ? ? ? ? ? 83 A1 ? ? ? ? ? 80 A1 ? ? ? ? ?"));
		ptrMgr.add(xorstr_("STT"), xorstr_("80 B9 ? ? ? ? ? 8B FA 48 8B D9 74 05"), xorstr_("-0xF"));
		ptrMgr.add(xorstr_("STK"), xorstr_("48 89 5C 24 ? 57 48 83 EC 20 48 83 B9 ? ? ? ? ? 48 8B D9 74 14"));
		ptrMgr.add(xorstr_("RE"), xorstr_("66 41 83 F9 ? 0F 83"));
		ptrMgr.add(xorstr_("RST"), xorstr_("48 89 5C 24 ? 48 89 6C 24 ? 48 89 7C 24 ? 41 54 41 56 41 57 48 83 EC 50 48 8B EA 4C 8B FA 48 8B D9 4D 85 C9 B2"));
		
		ptrMgr.add(xorstr_("U3SM"), xorstr_("4C 8B 15 ? ? ? ? 44 39 6E 44"), xorstr_("mov"));
		ptrMgr.add(xorstr_("BE"), xorstr_("0F 85 ? ? ? ? 48 8B 05 ? ? ? ? 48 8B 48 08 E8"));
		ptrMgr.add(xorstr_("GT"), xorstr_("F5 8B FD 73"), xorstr_("+5, mov"));
		ptrMgr.add(xorstr_("N"), xorstr_("48 8B 0D ? ? ? ? 48 8B D7 E8 ? ? ? ? 84 C0 75 17 48 8B 0D ? ? ? ? 48 8B D7"), xorstr_("mov"));
		ptrMgr.add(xorstr_("RD"), xorstr_("48 8D 0D ? ? ? ? 88 05 ? ? ? ? 48 8D 05"), xorstr_("mov"));
		ptrMgr.add(xorstr_("RF"), xorstr_("1A C9 22 0D ? ? ? ?"), xorstr_("+2, and"));
		ptrMgr.add(xorstr_("NT"), xorstr_("89 05 ? ? ? ? 75 0D"), xorstr_("mov"));
		ptrMgr.add(xorstr_("NEM"), xorstr_("48 8B 0D ? ? ? ? 48 8B DA B2 01"), xorstr_("mov"));
		ptrMgr.add(xorstr_("TF"), xorstr_("48 8B 0D ? ? ? ? 45 33 C0 48 8B 01 33 D2 FF 90 ? ? ? ? 48 8B 0D ? ? ? ? 83 64 24"), xorstr_("mov"));
		ptrMgr.add(xorstr_("TS"), xorstr_("48 8D 0D ? ? ? ? E8 ? ? ? ? 8B 45 EC 4C 8D 45 F0 48 8D 55 EC 48 8D 0D ? ? ? ? 89 45 F0 E8"), xorstr_("mov"));
		ptrMgr.add(xorstr_("GL"), xorstr_("48 8D 0D ? ? ? ? E8 ? ? ? ? 8B 0D ? ? ? ? 48 8B 5C 24 ?"), xorstr_("mov"));
		ptrMgr.add(xorstr_("FIMB"), xorstr_("48 8B 05 ? ? ? ? 0F 45 DF"), xorstr_("mov"));
		ptrMgr.add(xorstr_("CGI"), xorstr_("E8 ? ? ? ? 48 8B CF E8 ? ? ? ? 8B E8"), xorstr_("call, +3, mov"));
		ptrMgr.add(xorstr_("DST"), xorstr_("48 8D 0D ? ? ? ? 49 8B D3"), xorstr_("mov"));
		ptrMgr.add(xorstr_("R"), xorstr_("48 83 EC 28 83 3D ? ? ? ? ? 75 10"), xorstr_("+13, mov, +1"));
		ptrMgr.add(xorstr_("PS"), xorstr_("48 8D 0D ? ? ? ? 8B F8 E8 ? ? ? ? 3B F8"), xorstr_("mov"));
		ptrMgr.add(xorstr_("SPT"), xorstr_("48 8B 1D ? ? ? ? 41 83 F8 FF"), xorstr_("mov"));
		ptrMgr.add(xorstr_("MT"), xorstr_("4C 03 05 ? ? ? ? EB 03"), xorstr_("mov"));
		ptrMgr.add(xorstr_("PF"), xorstr_("48 8B 05 ? ? ? ? 8A D1"), xorstr_("mov"));
		ptrMgr.add(xorstr_("NPM"), xorstr_("48 8B 0D ? ? ? ? 8A D3 48 8B 01 FF 50 ? 4C 8B 07 48 8B CF"), xorstr_("mov"));
		ptrMgr.add(xorstr_("NOM"), xorstr_("48 8B 0D ? ? ? ? 45 33 C0 E8 ? ? ? ? 33 FF 4C 8B F0"), xorstr_("mov"));
		ptrMgr.add(xorstr_("GSHM"), xorstr_("74 17 48 8B C8 E8 ? ? ? ? 48 8D 0D"), xorstr_("+0xA, mov"));
		ptrMgr.add(xorstr_("RI"), xorstr_("0F B7 44 24 ? 66 89 44 4E"), xorstr_("+0x1C, mov"));
		ptrMgr.add(xorstr_("FR"), xorstr_("41 8B F4 3B C5"), xorstr_("-0xB, lea"));
		ptrMgr.add(xorstr_("SCI"), xorstr_("48 8D 05 ? ? ? ? 48 63 D1"), xorstr_("mov"));
		ptrMgr.add(xorstr_("S"), xorstr_("48 8B 3D ? ? ? ? 3B C8"), xorstr_("mov"));
		ptrMgr.add(xorstr_("NRT"), xorstr_("40 B6 01 39 79 2C"), xorstr_("+0xC, mov"));
		ptrMgr.add(xorstr_("GS"), xorstr_("83 3D ? ? ? ? ? 75 17 8B 43 20 25"), xorstr_("lea"));
		ptrMgr.add(xorstr_("G"), xorstr_("48 8B 8D ? ? ? ? 4C 8D 4D 08"), xorstr_("+0xB, mov"));
		ptrMgr.add(xorstr_("TI"), xorstr_("8B 15 ? ? ? ? 48 8B 05 ? ? ? ? FF C2 89 15 ? ? ? ? 48 8B 0C D8"), xorstr_("lea"));
		ptrMgr.add(xorstr_("TC"), xorstr_("FF 0D ? ? ? ? 48 8B D9 75"), xorstr_("lea"));
		ptrMgr.add(xorstr_("JRP"), xorstr_("23 C3 C1 E0 0C"), xorstr_("-1"));
		ptrMgr.run();
		while (!ptrMgr.allThreadsFinished())
			std::this_thread::sleep_for(1ms);
		g_scriptVirtualMachine = (decltype(g_scriptVirtualMachine))ptrMgr[xorstr_("SVM")];
		g_handleToPointer = (decltype(g_handleToPointer))ptrMgr[xorstr_("HTP")];
		g_pointerToHandle = (decltype(g_pointerToHandle))ptrMgr[xorstr_("PTH")];
		g_getSessionByGamerHandle = (decltype(g_getSessionByGamerHandle))ptrMgr[xorstr_("GSBGH")];
		g_getSessionInfoFromGsInfo = (decltype(g_getSessionInfoFromGsInfo))ptrMgr[xorstr_("GSIFGI")];
		g_getGsInfoFromSessionInfo = (decltype(g_getGsInfoFromSessionInfo))ptrMgr[xorstr_("GGIFSI")];
		g_joinBySessionInfo = (decltype(g_joinBySessionInfo))ptrMgr[xorstr_("JBSI")];
		g_startMatchmakingFindSessions = (decltype(g_startMatchmakingFindSessions))ptrMgr[xorstr_("SMFS")];
		g_readBitbufArray = (decltype(g_readBitbufArray))ptrMgr[xorstr_("RBA")];
		g_writeBitbufArray = (decltype(g_writeBitbufArray))ptrMgr[xorstr_("WBA")];
		g_readBitsSingle = (decltype(g_readBitsSingle))ptrMgr[xorstr_("RBS")];
		g_writeBitsSingle = (decltype(g_writeBitsSingle))ptrMgr[xorstr_("WBS")];
		g_sendEventAck = (decltype(g_sendEventAck))ptrMgr[xorstr_("SEA")];
		g_sendSyncAck = (decltype(g_sendSyncAck))ptrMgr[xorstr_("SSA")];
		g_receiveCloneSync = (decltype(g_receiveCloneSync))ptrMgr[xorstr_("RCS")];
		g_netConMgrChannelDispatchEvent = (decltype(g_netConMgrChannelDispatchEvent))ptrMgr[xorstr_("NCMCDE")];
		g_getSyncTree = (decltype(g_getSyncTree))ptrMgr[xorstr_("GST")];
		g_getNetObject = (decltype(g_getNetObject))ptrMgr[xorstr_("GNO")];
		g_constructAddGamerToSessionCmd = (decltype(g_constructAddGamerToSessionCmd))ptrMgr[xorstr_("CAGTSC")];
		g_writePlayerGameStateDataNode = (decltype(g_writePlayerGameStateDataNode))ptrMgr[xorstr_("WPGSDN")];
		g_writePlayerGamerDataNode = (decltype(g_writePlayerGamerDataNode))ptrMgr[xorstr_("WPGDN")];
		g_netTextMsgConstructor = (decltype(g_netTextMsgConstructor))ptrMgr[xorstr_("NTMC")];
		g_readBitbufferIntoSyncTree = (decltype(g_readBitbufferIntoSyncTree))ptrMgr[xorstr_("RBIST")];
		g_resetNetworkComplaints = (decltype(g_resetNetworkComplaints))ptrMgr[xorstr_("RNC")];
		g_queuePacketWithPlayer = (decltype(g_queuePacketWithPlayer))ptrMgr[xorstr_("QPWP")];
		g_queuePacketViaMsgId = (decltype(g_queuePacketViaMsgId))ptrMgr[xorstr_("QPVMI")];
		g_sendPacketViaConId = (decltype(g_sendPacketViaConId))ptrMgr[xorstr_("SPVCI")];
		g_sendInviteAcceptedPresenceEvent = (decltype(g_sendInviteAcceptedPresenceEvent))ptrMgr[xorstr_("SIAPE")];
		g_constructJoinRequest = (decltype(g_constructJoinRequest))ptrMgr[xorstr_("CJR")];
		g_multiplayerChatFilter = (decltype(g_multiplayerChatFilter))ptrMgr[xorstr_("MCF")];
		g_getPeerAddress = (decltype(g_getPeerAddress))ptrMgr[xorstr_("GPA")];
		g_getNetworkEventData = *reinterpret_cast<std::add_pointer_t<decltype(g_getNetworkEventData)>>(ptrMgr[xorstr_("GNED")]);
		g_hasRosPrivilege = (decltype(g_hasRosPrivilege))ptrMgr[xorstr_("HRP")];
		g_handleJoinRequest = (decltype(g_handleJoinRequest))ptrMgr[xorstr_("HJR")];
		g_writeJoinResponseData = (decltype(g_writeJoinResponseData))ptrMgr[xorstr_("WJRD")];
		g_constructPlayerDataMsg = (decltype(g_constructPlayerDataMsg))ptrMgr[xorstr_("CPDM")];
		g_getGxtLabelFromTable = (decltype(g_getGxtLabelFromTable))ptrMgr[xorstr_("GGLFT")];
		g_getJoaatedGxtLabelFromTable = (decltype(g_getJoaatedGxtLabelFromTable))ptrMgr[xorstr_("GJGLFT")];
		g_networkPlayerMgrShutdown = (decltype(g_networkPlayerMgrShutdown))ptrMgr[xorstr_("NPMS")];
		g_networkPlayerMgrInitialize = (decltype(g_networkPlayerMgrInitialize))ptrMgr[xorstr_("NPMI")];
		g_getConnectionPeer = (decltype(g_getConnectionPeer))ptrMgr[xorstr_("GCP")];
		g_openNetTunnel = (decltype(g_openNetTunnel))ptrMgr[xorstr_("ONT")];
		g_triggerScriptEvent = (decltype(g_triggerScriptEvent))ptrMgr[xorstr_("TSE")];
		g_setupStoreItem = (decltype(g_setupStoreItem))ptrMgr[xorstr_("SSI")];
		g_addDictionaryToPool = (decltype(g_addDictionaryToPool))ptrMgr[xorstr_("ADTP")];
		g_addGrcTextureToDictionary = (decltype(g_addGrcTextureToDictionary))ptrMgr[xorstr_("AGTTD")];
		g_setupDictionary = (decltype(g_setupDictionary))ptrMgr[xorstr_("SD")];
		g_queueDependency = (decltype(g_queueDependency))ptrMgr[xorstr_("QD")];
		g_hasIntervalElapsed = (decltype(g_hasIntervalElapsed))ptrMgr[xorstr_("HIE")];
		g_addSyncLatencySample = (decltype(g_addSyncLatencySample))ptrMgr[xorstr_("ASLS")];
		g_pushScenePresentMgr = (decltype(g_pushScenePresentMgr))ptrMgr[xorstr_("PSPM")];
		g_addElementToScene = (decltype(g_addElementToScene))ptrMgr[xorstr_("AETS")];
		g_setSceneElementLighting = (decltype(g_setSceneElementLighting))ptrMgr[xorstr_("SSEL")];
		g_getScrCommand = (decltype(g_getScrCommand))ptrMgr[xorstr_("GSC")];
		g_scrThreadInit = (decltype(g_scrThreadInit))ptrMgr[xorstr_("STI")];
		g_scrThreadTick = (decltype(g_scrThreadTick))ptrMgr[xorstr_("STT")];
		g_scrThreadKill = (decltype(g_scrThreadKill))ptrMgr[xorstr_("STK")];
		g_receivedEvent = (decltype(g_receivedEvent))ptrMgr[xorstr_("RE")];
		g_registerStreamingTexture = (decltype(g_registerStreamingTexture))ptrMgr[xorstr_("RST")];

		g_ui3DSceneMgr = (decltype(g_ui3DSceneMgr))ptrMgr[xorstr_("U3SM")];
		g_blameExplode = memory::bytePatch::make((uint16_t*)ptrMgr[xorstr_("BE")], 0xE990).get();
		g_gtaThreads = (decltype(g_gtaThreads))ptrMgr[xorstr_("GT")];
		g_network = (decltype(g_network))ptrMgr[xorstr_("N")];
		g_reportDependency = (decltype(g_reportDependency))ptrMgr[xorstr_("RD")];
		g_rcsFlag = (decltype(g_rcsFlag))ptrMgr[xorstr_("RF")];
		g_networkTime = (decltype(g_networkTime))ptrMgr[xorstr_("NT")];
		g_netEventMgr = (decltype(g_netEventMgr))ptrMgr[xorstr_("NEM")];
		g_textureFactory = (decltype(g_textureFactory))ptrMgr[xorstr_("TF")];
		g_textureStore = (decltype(g_textureStore))ptrMgr[xorstr_("TS")];
		g_gxtLabels = (decltype(g_gxtLabels))ptrMgr[xorstr_("GL")];
		g_fwuiInputMessageBase = (decltype(g_fwuiInputMessageBase))ptrMgr[xorstr_("FIMB")];
		g_chatGamerInfo = (decltype(g_chatGamerInfo))ptrMgr[xorstr_("CGI")];
		g_dispatchSerivceTable = (decltype(g_dispatchSerivceTable))ptrMgr[xorstr_("DST")];
		g_region = (decltype(g_region))ptrMgr[xorstr_("R")];
		g_presenceStruct = (decltype(g_presenceStruct))ptrMgr[xorstr_("PS")];
		g_scrProgramTbl = (decltype(g_scrProgramTbl))ptrMgr[xorstr_("SPT")];
		g_modelTable = (decltype(g_modelTable))ptrMgr[xorstr_("MT")];
		g_pedFactory = (decltype(g_pedFactory))ptrMgr[xorstr_("PF")];
		g_networkPlayerMgr = (decltype(g_networkPlayerMgr))ptrMgr[xorstr_("NPM")];
		g_netObjMgr = (decltype(g_netObjMgr))ptrMgr[xorstr_("NOM")];
		g_gameScriptHandlerMgr = (decltype(g_gameScriptHandlerMgr))ptrMgr[xorstr_("GSHM")];
		g_replayInterface = (decltype(g_replayInterface))ptrMgr[xorstr_("RI")];
		g_friendRegistry = (decltype(g_friendRegistry))ptrMgr[xorstr_("FR")];
		g_socialClubInfo = (decltype(g_socialClubInfo))ptrMgr[xorstr_("SCI")];
		g_swapchain = (decltype(g_swapchain))ptrMgr[xorstr_("S")];
		g_nativeRegTbl = (decltype(g_nativeRegTbl))ptrMgr[xorstr_("NRT")];
		g_gameState = (decltype(g_gameState))ptrMgr[xorstr_("GS")];
		g_globals = (decltype(g_globals))ptrMgr[xorstr_("G")];
		g_threadId = (decltype(g_threadId))ptrMgr[xorstr_("TI")];
		g_threadCount = (decltype(g_threadCount))ptrMgr[xorstr_("TC")];
		g_jmpRbxRegister = ptrMgr[xorstr_("JRP")];
		g_hwnd = FindWindowA("grcWindow", nullptr);
		auto endTime = stopwatch.getAs<float>();
		using namespace memory::util;
		ptrMgr.print();
		ptrMgr.clear();
		LOG(Info, "Found {} signatures with {} failed signature{}out of {} total signatures. Scan time took {}ms with a per signature avg. of {}ms", g_foundSigCount, g_failedSigCount, g_failedSigCount > 1 ? "s " : " ", g_totalSigCount, endTime, endTime / g_totalSigCount);
	}

	inline memory::pointerManager patchMgr{};
	void applyPatches() {
		patchMgr.add(xorstr_("S3I"), xorstr_("BA ? ? ? ? E8 ? ? ? ? 84 C0 74 ? BB ? ? ? ? 8A C3 48 83 C4 ? 5B C3 90"));
		patchMgr.add(xorstr_("S30I"), xorstr_("BA ? ? ? ? E8 ? ? ? ? 84 C0 74 ? BB ? ? ? ? 8A C3 48 83 C4 ? 5B C3 CC 48 83 EC"));
		patchMgr.add(xorstr_("ISMV"), xorstr_("48 89 5C 24 08 48 89 6C 24 10 48 89 74 24 18 57 41 54 41 55 41 56 41 57 48 83 EC 20 45 0F"));
		patchMgr.add(xorstr_("CWCT"), xorstr_("74 44 E8 ? ? ? ? 80 65 2B F8 48 8D 0D ? ? ? ? 48 89 4D 17 48 89 7D 1F 89 7D 27 C7 45"));
		patchMgr.add(xorstr_("FIS_1"), xorstr_("3B 0A 0F 83 ? ? ? ? 48 FF C7"), xorstr_("+2"));	
		patchMgr.add(xorstr_("FIS_1_2"), xorstr_("3B 0A 0F 83 ? ? ? ? 48 FF C7"), xorstr_("+6"));
		patchMgr.add(xorstr_("FIS_2"), xorstr_("3B 0A 0F 83 ? ? ? ? 49 03 FA"), xorstr_("+2"));
		patchMgr.add(xorstr_("FIS_2_2"), xorstr_("3B 0A 0F 83 ? ? ? ? 49 03 FA"), xorstr_("+6"));
		patchMgr.run();
		while (!patchMgr.allThreadsFinished())
			std::this_thread::sleep_for(1ms);
		patchMgr.print();
		memory::bytePatch::make(patchMgr[xorstr_("S3I")], std::to_array({0xBA, 0xB9, 0x0B, 0x00, 0x00}))->apply();
		memory::bytePatch::make(patchMgr[xorstr_("S30I")], std::to_array({ 0xBA, 0x31, 0x75, 0x00, 0x00 }))->apply();
		memory::bytePatch::make(patchMgr[xorstr_("ISMV")], std::to_array({ 0xB0, 0x01, 0xC3 }))->apply();
		memory::bytePatch::make((uint8_t*)patchMgr[xorstr_("CWCT")], 0xE8)->apply();
		memory::bytePatch::make((uint32_t*)patchMgr[xorstr_("FIS_1")], 0xC9310272)->apply();
		memory::bytePatch::make((uint16_t*)patchMgr[xorstr_("FIS_1_2")], 0x9090)->apply();
		memory::bytePatch::make((uint32_t*)patchMgr[xorstr_("FIS_2")], 0xC9310272)->apply();
		memory::bytePatch::make((uint16_t*)patchMgr[xorstr_("FIS_2_2")], 0x9090)->apply();
		patchMgr.clear();
	}

	void restorePatches() {
		memory::bytePatch::removeAll();
	}
}